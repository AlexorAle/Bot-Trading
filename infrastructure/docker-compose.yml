version: '3.8'

services:
  # Trading Bot Service
  trading-bot:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.trading-bot
    container_name: trading-bot
    restart: unless-stopped
    environment:
      - EXCHANGE=${EXCHANGE}
      - API_KEY=${API_KEY}
      - SECRET=${SECRET}
      - SYMBOL=${SYMBOL}
      - TIMEFRAME=${TIMEFRAME}
      - RISK_PER_TRADE=${RISK_PER_TRADE}
      - LEVERAGE=${LEVERAGE}
      - MODE=${MODE}
      - LOG_LEVEL=${LOG_LEVEL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    volumes:
      - ../logs:/app/logs
      - ../backups:/app/backups
      - ../configs:/app/configs
    ports:
      - "8080:8080"  # Prometheus metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - trading-network
    depends_on:
      - redis
      - postgres

  # Streamlit Dashboard Service
  streamlit-dashboard:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.streamlit
    container_name: streamlit-dashboard
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      - ../logs:/app/logs
      - ../backups:/app/backups
      - ../configs:/app/configs
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - trading-network
    depends_on:
      - trading-bot

  # Investment Dashboard Backend
  investment-backend:
    build:
      context: ../proyectos/investment-dashboard
      dockerfile: infrastructure/Dockerfile.backend
    container_name: investment-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://trading:${POSTGRES_PASSWORD}@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../proyectos/investment-dashboard/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis

  # Investment Dashboard Frontend
  investment-frontend:
    build:
      context: ../proyectos/investment-dashboard
      dockerfile: infrastructure/Dockerfile.frontend
    container_name: investment-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://investment-backend:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - trading-network
    depends_on:
      - investment-backend

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - trading-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - trading-network
    depends_on:
      - prometheus

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=trading_db
      - POSTGRES_USER=trading
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading -d trading_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network
    depends_on:
      - streamlit-dashboard
      - investment-frontend

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data:

networks:
  trading-network:
    driver: bridge
