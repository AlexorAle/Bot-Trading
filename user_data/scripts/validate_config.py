#!/usr/bin/env python3
"""
Script de validaci√≥n autom√°tica para archivos de configuraci√≥n de Freqtrade.
Valida que el config tenga los campos requeridos antes de ejecutar backtests.
"""

import json
import sys
from pathlib import Path

def validate_config(config_path):
    """
    Valida que el archivo de configuraci√≥n tenga los campos requeridos.
    
    Args:
        config_path (str): Ruta al archivo de configuraci√≥n
        
    Returns:
        bool: True si es v√°lido, False si hay errores
    """
    try:
        # Verificar que el archivo existe
        config_file = Path(config_path)
        if not config_file.exists():
            print(f"‚ùå ERROR: El archivo {config_path} no existe")
            return False
        
        # Cargar el archivo JSON
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # Lista de campos requeridos
        required_fields = [
            "stoploss",
            "minimal_roi",
            "exchange",
            "pairlists",
            "max_open_trades",
            "stake_currency",
            "stake_amount"
        ]
        
        # Verificar campos requeridos
        missing_fields = []
        for field in required_fields:
            if field not in config:
                missing_fields.append(field)
        
        if missing_fields:
            print(f"‚ùå ERROR: Faltan campos requeridos: {', '.join(missing_fields)}")
            return False
        
        # Verificar campos espec√≠ficos
        errors = []
        
        # Verificar stoploss
        if not isinstance(config["stoploss"], (int, float)) or config["stoploss"] >= 0:
            errors.append("stoploss debe ser un n√∫mero negativo")
        
        # Verificar minimal_roi
        if not isinstance(config["minimal_roi"], dict):
            errors.append("minimal_roi debe ser un objeto/diccionario")
        
        # Verificar exchange
        if "name" not in config["exchange"]:
            errors.append("exchange debe tener un campo 'name'")
        
        # Verificar strategy_parameters (opcional pero recomendado)
        if "strategy_parameters" not in config:
            print("‚ö†Ô∏è  ADVERTENCIA: No se encontr√≥ 'strategy_parameters' en el config")
            print("   Esto es recomendado para par√°metros personalizados de la estrategia")
        
        if errors:
            print(f"‚ùå ERROR: Problemas encontrados:")
            for error in errors:
                print(f"   - {error}")
            return False
        
        # Mostrar informaci√≥n del config
        print("‚úÖ Configuraci√≥n v√°lida")
        print(f"   - Stoploss: {config['stoploss']}")
        print(f"   - Minimal ROI: {config['minimal_roi']}")
        print(f"   - Exchange: {config['exchange']['name']}")
        print(f"   - Max open trades: {config['max_open_trades']}")
        print(f"   - Stake amount: {config['stake_amount']} {config['stake_currency']}")
        
        if "strategy_parameters" in config:
            print(f"   - Strategy parameters: {len(config['strategy_parameters'])} par√°metros")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå ERROR: El archivo JSON no es v√°lido: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERROR inesperado: {e}")
        return False

def main():
    """Funci√≥n principal del script"""
    if len(sys.argv) != 2:
        print("Uso: python validate_config.py <ruta_al_config.json>")
        print("Ejemplo: python validate_config.py configs/config_crypto.json")
        sys.exit(1)
    
    config_path = sys.argv[1]
    
    print(f"üîç Validando configuraci√≥n: {config_path}")
    print("-" * 50)
    
    is_valid = validate_config(config_path)
    
    if is_valid:
        print("-" * 50)
        print("üéâ Configuraci√≥n lista para usar")
        sys.exit(0)
    else:
        print("-" * 50)
        print("üí• Configuraci√≥n inv√°lida - Corregir antes de continuar")
        sys.exit(1)

if __name__ == "__main__":
    main()

