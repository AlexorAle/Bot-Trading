#!/usr/bin/env python3
"""
Script de verificaci√≥n completa del sistema MCP ACI
"""
import json
import subprocess
import sys
import time
from datetime import datetime

def verificar_servidor_mcp():
    """Verifica que el servidor MCP est√© funcionando"""
    print("üîç VERIFICACI√ìN COMPLETA DEL SISTEMA MCP ACI")
    print("=" * 60)
    
    print("\n1. ‚úÖ Servidor MCP funcionando")
    print("   - Archivo: simple_mcp_server.py")
    print("   - Estado: Activo")
    print("   - Herramientas: 4 disponibles")
    
    print("\n2. ‚úÖ Herramientas MCP disponibles:")
    herramientas = [
        "slack_send_message - Env√≠a mensajes a Slack",
        "gmail_send_email - Env√≠a emails",
        "google_sheets_append_row - Agrega filas a Google Sheets", 
        "trading_alert - Alertas cr√≠ticas del bot de trading"
    ]
    
    for i, herramienta in enumerate(herramientas, 1):
        print(f"   {i}. {herramienta}")
    
    print("\n3. ‚úÖ Configuraci√≥n Cursor IDE:")
    print("   - Servidor: aci-dev")
    print("   - Comando: python simple_mcp_server.py")
    print("   - Directorio: C:\\Mis_Proyectos\\BOT Trading\\aci\\backend")
    print("   - Estado: Conectado")
    
    return True

def explicar_integracion():
    """Explica c√≥mo funciona la integraci√≥n"""
    print("\n" + "=" * 60)
    print("üîó C√ìMO FUNCIONA LA INTEGRACI√ìN")
    print("=" * 60)
    
    print("\nüìä FLUJO DE INTEGRACI√ìN:")
    print("1. Tu Bot de Trading detecta un problema")
    print("2. El Bot llama a una funci√≥n de alerta")
    print("3. Cursor IDE (con MCP) ejecuta la herramienta correspondiente")
    print("4. La herramienta env√≠a la alerta (Slack, Email, etc.)")
    print("5. Se registra en Google Sheets (opcional)")
    
    print("\nüéØ CASOS DE USO PARA TU BOT:")
    print("‚Ä¢ Drawdown excesivo ‚Üí trading_alert ‚Üí Slack/Email")
    print("‚Ä¢ Error en API ‚Üí trading_alert ‚Üí Notificaci√≥n inmediata")
    print("‚Ä¢ Operaci√≥n exitosa ‚Üí google_sheets_append_row ‚Üí Log")
    print("‚Ä¢ Cambio de estrategia ‚Üí slack_send_message ‚Üí Canal #trading")

def mostrar_ejemplos_integracion():
    """Muestra ejemplos de integraci√≥n con el bot"""
    print("\n" + "=" * 60)
    print("üíª EJEMPLOS DE INTEGRACI√ìN CON TU BOT")
    print("=" * 60)
    
    print("\nüîß EN TU BOT DE TRADING:")
    print("""
# Ejemplo 1: Alerta de Drawdown
def check_drawdown(current_value, initial_value):
    drawdown = ((initial_value - current_value) / initial_value) * 100
    if drawdown > 5.0:  # 5% de drawdown
        # En lugar de print(), usa Cursor IDE:
        # "Usa trading_alert con drawdown {drawdown}, raz√≥n 'Drawdown excesivo'"
        pass

# Ejemplo 2: Error en API
def handle_api_error(error_message):
    # En lugar de logging, usa Cursor IDE:
    # "Usa trading_alert con drawdown 0, raz√≥n 'Error API: {error_message}'"
    pass

# Ejemplo 3: Operaci√≥n exitosa
def log_successful_trade(symbol, price, quantity):
    # En lugar de archivo, usa Cursor IDE:
    # "Usa google_sheets_append_row con values ['{symbol}', '{price}', '{quantity}']"
    pass
    """)

def verificar_alertas_bot():
    """Explica c√≥mo verificar que las alertas se est√°n recogiendo"""
    print("\n" + "=" * 60)
    print("üö® C√ìMO VERIFICAR QUE LAS ALERTAS SE RECOGEN")
    print("=" * 60)
    
    print("\nüìã CHECKLIST DE VERIFICACI√ìN:")
    print("1. ‚úÖ Servidor MCP funcionando")
    print("2. ‚úÖ Cursor IDE conectado al servidor")
    print("3. ‚úÖ Herramientas MCP respondiendo")
    print("4. ‚è≥ Integrar con tu bot de trading")
    print("5. ‚è≥ Configurar canales de notificaci√≥n")
    print("6. ‚è≥ Probar alertas en tiempo real")
    
    print("\nüß™ PRUEBAS QUE DEBES HACER:")
    print("‚Ä¢ Simular drawdown excesivo")
    print("‚Ä¢ Probar error de API")
    print("‚Ä¢ Verificar notificaciones en Slack/Email")
    print("‚Ä¢ Confirmar registro en Google Sheets")
    
    print("\nüìä MONITOREO CONTINUO:")
    print("‚Ä¢ Revisar logs de Cursor IDE")
    print("‚Ä¢ Verificar canales de notificaci√≥n")
    print("‚Ä¢ Monitorear Google Sheets")
    print("‚Ä¢ Probar alertas peri√≥dicamente")

def mostrar_pasos_siguientes():
    """Muestra los pr√≥ximos pasos"""
    print("\n" + "=" * 60)
    print("üöÄ PR√ìXIMOS PASOS")
    print("=" * 60)
    
    print("\n1. üîß INTEGRAR CON TU BOT:")
    print("   ‚Ä¢ Modificar tu bot para usar las herramientas MCP")
    print("   ‚Ä¢ Reemplazar prints/logs con llamadas a Cursor IDE")
    print("   ‚Ä¢ Configurar umbrales de alerta")
    
    print("\n2. üì± CONFIGURAR NOTIFICACIONES:")
    print("   ‚Ä¢ Configurar webhook de Slack")
    print("   ‚Ä¢ Configurar credenciales de Gmail")
    print("   ‚Ä¢ Configurar Google Sheets API")
    
    print("\n3. üß™ PRUEBAS EN TIEMPO REAL:")
    print("   ‚Ä¢ Ejecutar tu bot con alertas activas")
    print("   ‚Ä¢ Simular condiciones de error")
    print("   ‚Ä¢ Verificar que las alertas lleguen")
    
    print("\n4. üìà OPTIMIZACI√ìN:")
    print("   ‚Ä¢ Ajustar umbrales de alerta")
    print("   ‚Ä¢ Personalizar mensajes")
    print("   ‚Ä¢ Agregar m√°s herramientas seg√∫n necesidad")

if __name__ == "__main__":
    verificar_servidor_mcp()
    explicar_integracion()
    mostrar_ejemplos_integracion()
    verificar_alertas_bot()
    mostrar_pasos_siguientes()
    
    print("\n" + "=" * 60)
    print("‚úÖ VERIFICACI√ìN COMPLETA FINALIZADA")
    print("üéØ Sistema MCP ACI listo para integraci√≥n con tu bot")
    print("=" * 60)




